# Titanium Windows Native Module - <%- moduleName %>
#
# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.
# Licensed under the terms of the Apache Public License.
# Please see the LICENSE included with this distribution for details.

cmake_minimum_required(VERSION 3.0.0)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows10")
  set(PLATFORM win10)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "WindowsPhone")
  set(PLATFORM phone)
  add_definitions("-DPHONE")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
  set(PLATFORM store)
else()
  message(FATAL_ERROR "This app supports Store / Phone only.")
endif()

project(<%- moduleIdAsIdentifier %>)

set(<%- moduleIdAsIdentifier %>_VERSION 0.1.0)

set(WINDOWS_SOURCE_DIR "<%- tisdkPath.replace(/\\/g,'/') %>/windows")

SET(CMAKE_FIND_LIBRARY_PREFIXES "")
SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

set(<%= moduleIdAsIdentifier %>_ARCH "x86")
if(CMAKE_GENERATOR MATCHES "^Visual Studio .+ ARM$")
  set(<%= moduleIdAsIdentifier %>_ARCH "ARM")
endif()

option(<%- moduleIdAsIdentifier %>_DISABLE_TESTS "Disable compiling the tests" OFF)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

get_filename_component(APPCELERATOR_CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ABSOLUTE)
list(INSERT CMAKE_MODULE_PATH 0 ${APPCELERATOR_CMAKE_MODULE_PATH})

find_package(HAL REQUIRED)
find_package(TitaniumKit REQUIRED)
find_package(TitaniumWindows_Utility REQUIRED)

enable_testing()

set(SOURCE_<%- moduleIdAsIdentifier %>
  include/<%- moduleIdAsIdentifier %>.hpp
  src/<%- moduleIdAsIdentifier %>.cpp
  )

source_group(<%- moduleIdAsIdentifier %> FILES ${SOURCE_<%- moduleIdAsIdentifier %>})

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

add_library(<%- moduleIdAsIdentifier %> SHARED
  ${SOURCE_<%- moduleIdAsIdentifier %>}
  )

include(GenerateExportHeader)
generate_export_header(<%- moduleIdAsIdentifier %>)
target_compile_definitions(<%- moduleIdAsIdentifier %> PRIVATE <%- moduleIdAsIdentifier %>_EXPORTS)

target_include_directories(<%- moduleIdAsIdentifier %> PUBLIC
  ${PROJECT_SOURCE_DIR}/include
  $<TARGET_PROPERTY:HAL,INTERFACE_INCLUDE_DIRECTORIES>
  $<TARGET_PROPERTY:TitaniumKit,INTERFACE_INCLUDE_DIRECTORIES>
  $<TARGET_PROPERTY:TitaniumWindows_Utility,INTERFACE_INCLUDE_DIRECTORIES>
  )

file(GLOB MODULE_TARGET_LIBS ${PROJECT_SOURCE_DIR}/lib/${PLATFORM}/${<%- moduleIdAsIdentifier %>_ARCH}/*.lib)

target_link_libraries(<%- moduleIdAsIdentifier %>
  HAL
  TitaniumKit
  TitaniumWindows_Utility
  ${MODULE_TARGET_LIBS}
  )

set_target_properties(<%- moduleIdAsIdentifier %> PROPERTIES VS_WINRT_COMPONENT TRUE)

set_property(TARGET <%- moduleIdAsIdentifier %> APPEND_STRING PROPERTY LINK_FLAGS_DEBUG "/OPT:NOREF /OPT:NOICF")

if (NOT <%- moduleIdAsIdentifier %>_DISABLE_TESTS)
  add_subdirectory(test)
endif()

set_property(TARGET <%- moduleIdAsIdentifier %> PROPERTY VERSION ${<%- moduleIdAsIdentifier %>_VERSION})
set_property(TARGET <%- moduleIdAsIdentifier %> PROPERTY SOVERSION 0)
set_property(TARGET <%- moduleIdAsIdentifier %> PROPERTY INTERFACE_<%- moduleIdAsIdentifier %>_MAJOR_VERSION 0)
set_property(TARGET <%- moduleIdAsIdentifier %> APPEND PROPERTY
  COMPATIBLE_INTERFACE_STRING <%- moduleIdAsIdentifier %>_MAJOR_VERSION
  )


file(GLOB MODULE_WINRT_REFERENCES ${PROJECT_SOURCE_DIR}/lib/${PLATFORM}/${<%- moduleIdAsIdentifier %>_ARCH}/*.winmd)
set_property(TARGET <%- moduleIdAsIdentifier %>
  PROPERTY VS_WINRT_REFERENCES
  ${MODULE_WINRT_REFERENCES}
)

install(TARGETS <%- moduleIdAsIdentifier %> EXPORT <%- moduleIdAsIdentifier %>_Targets
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
  )

export(EXPORT <%- moduleIdAsIdentifier %>_Targets
  FILE "${CMAKE_BINARY_DIR}/<%- moduleIdAsIdentifier %>_Targets.cmake"
)

configure_file(cmake/<%- moduleIdAsIdentifier %>_Config.cmake
  "${CMAKE_BINARY_DIR}/<%- moduleIdAsIdentifier %>_Config.cmake"
  COPYONLY
  )

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  "${CMAKE_BINARY_DIR}/<%- moduleIdAsIdentifier %>_ConfigVersion.cmake"
  VERSION ${<%- moduleIdAsIdentifier %>_VERSION}
  COMPATIBILITY AnyNewerVersion
  )

export(PACKAGE <%- moduleIdAsIdentifier %>)