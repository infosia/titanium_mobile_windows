/**
* Titanium for Windows
*
* Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.
* Licensed under the terms of the Apache Public License.
* Please see the LICENSE included with this distribution for details.
*/
#include "RequireHook.hpp"
#include "TitaniumWindows/Utility.hpp"
#include "Titanium/detail/TiImpl.hpp"
#include "HAL/HAL.hpp"
#include <collection.h>

//// NATIVE_MODULE_INCLUDES START
<% for(var i=0; i<native_module_includes.length; i++) { -%>
#include "<%- native_module_includes[i] %>"
<% } -%>
//// NATIVE_MODULE_INCLUDES END

namespace TitaniumWindows_Native
{

	using namespace HAL;

	RequireHook::RequireHook()
	{
	}

	RequireHook::~RequireHook()
	{
		app__->TitaniumModulePreload -= preload__;
		app__->TitaniumModuleNames   -= names__;
	}

	void RequireHook::Register(TitaniumWindows::Application^ app)
	{
		app__ = app;
		preload__ = app__->TitaniumModulePreload += ref new TitaniumWindows::TitaniumModulePreloadHandler(this, &TitaniumWindows_Native::RequireHook::OnTitaniumModulePreload);
		names__   = app__->TitaniumModuleNames   += ref new TitaniumWindows::TitaniumModuleNamesHandler(this, &TitaniumWindows_Native::RequireHook::OnTitaniumModuleNames);

		app__->SaveRequireHook(this);
	}

	// This should return pointer to JSObject (key-value) which consists of module name & preloaded JSObject
	std::intptr_t RequireHook::OnTitaniumModulePreload(std::intptr_t js_context_ref)
	{
		const auto js_context = JSContext(reinterpret_cast<JsContextRef>(js_context_ref));

		auto js_preloaded_module_map = js_context.CreateObject();


		//// TODO: native module initialization 
		//// js_preloaded_module_map.SetProperty("com.example.test", js_context.CreateObject(JSExport<Com::Example::Test>::Class()));

		//// INITIALLIZE PRELOADED NATIVE MODULE START
<% for(var i=0; i<native_modules.length; i++) { if (native_modules[i].preload) { -%>
		js_preloaded_module_map.SetProperty("<%- native_modules[i].name %>", js_context.CreateObject(JSExport<<%- native_modules[i].className %>>::Class()));
<% }} -%>
		//// INITIALLIZE PRELOADED NATIVE MODULE END

		return reinterpret_cast<std::intptr_t>(static_cast<JsValueRef>(js_preloaded_module_map));
	}

	// This should return collections of supported name module names such as Windows.Xaml.Controls.Button etc.
	Windows::Foundation::Collections::IVector<Platform::String^>^ RequireHook::OnTitaniumModuleNames(int js_context_ref)
	{
		auto names = ref new ::Platform::Collections::Vector<::Platform::String^>();

		//// INSERT SUPPORTED NATIVE MODULE NAMES START
		// modules
<% for(var i=0; i<native_modules.length; i++) { -%>
		names->Append("<%- native_modules[i].name %>");
<% } -%>
		// native types
<% for(var key in native_types) { -%>
		names->Append("<%- native_types[key].name %>");
<% } -%>
		// native namespaces
<% for(var key in native_namespaces) { -%>
		names->Append("<%- native_namespaces[key].name %>.*");
<% } -%>

		//// INSERT SUPPORTED NATIVE MODULE NAMES END

		return names;
	}

} // namespace TitaniumWindows